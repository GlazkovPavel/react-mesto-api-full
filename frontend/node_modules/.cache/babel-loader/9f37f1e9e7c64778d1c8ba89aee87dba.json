{"ast":null,"code":"import _classCallCheck from\"/Users/pavelglazkov/Desktop/dev/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/pavelglazkov/Desktop/dev/react-mesto-api-full/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{config}from\"./utils\";var Api=/*#__PURE__*/function(){function Api(config){_classCallCheck(this,Api);this._url=config.url;this._headers=config.headers;}_createClass(Api,[{key:\"_getResponse\",value:function _getResponse(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));}},{key:\"getInitialCards\",value:function getInitialCards(){return fetch(\"\".concat(this._url,\"/cards\"),{headers:this._headers}).then(this._getResponse);}},{key:\"getUserInfo\",value:function getUserInfo(){return fetch(\"\".concat(this._url,\"/users/me\"),{headers:this._headers}).then(this._getResponse);}},{key:\"setUserInfo\",value:function setUserInfo(data){return fetch(\"\".concat(this._url,\"/users/me\"),{method:'PATCH',headers:this._headers,body:JSON.stringify({name:data.name,about:data.about})}).then(this._getResponse);}},{key:\"setCardServer\",value:function setCardServer(data){return fetch(\"\".concat(this._url,\"/cards\"),{method:'POST',headers:this._headers,body:JSON.stringify({name:data.name,link:data.link})}).then(this._getResponse);}},{key:\"changeLikeCardStatus\",value:function changeLikeCardStatus(cardId,isLiked){return fetch(\"\".concat(this._url,\"/cards/\").concat(cardId,\"/likes\"),{method:isLiked?'PUT':'DELETE',headers:this._headers}).then(this._getResponse);}},{key:\"deleteCard\",value:function deleteCard(cardId){return fetch(\"\".concat(this._url,\"/cards/\").concat(cardId),{method:'DELETE',headers:this._headers}).then(this._getResponse);}},{key:\"changeAvatar\",value:function changeAvatar(data){return fetch(\"\".concat(this._url,\"/users/me/avatar\"),{method:'PATCH',headers:this._headers,body:JSON.stringify({avatar:data.avatar})}).then(this._getResponse);}}]);return Api;}();var api=new Api(config);export default api;","map":{"version":3,"sources":["/Users/pavelglazkov/Desktop/dev/react-mesto-api-full/frontend/src/utils/api.js"],"names":["config","Api","_url","url","_headers","headers","res","ok","json","Promise","reject","status","fetch","then","_getResponse","data","method","body","JSON","stringify","name","about","link","cardId","isLiked","avatar","api"],"mappings":"sWAAA,OAAQA,MAAR,KAAqB,SAArB,C,GACMC,CAAAA,G,yBACF,aAAYD,MAAZ,CAAoB,2BAChB,KAAKE,IAAL,CAAYF,MAAM,CAACG,GAAnB,CACA,KAAKC,QAAL,CAAgBJ,MAAM,CAACK,OAAvB,CACH,C,4CAED,sBAAaC,GAAb,CAAkB,CACd,GAAIA,GAAG,CAACC,EAAR,CAAY,CACR,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACH,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,iDAA0BJ,GAAG,CAACK,MAA9B,EAAP,CACH,C,+BAED,0BAAkB,CACd,MAAOC,CAAAA,KAAK,WAAI,KAAKV,IAAT,WAAuB,CAC/BG,OAAO,CAAE,KAAKD,QADiB,CAAvB,CAAL,CAGFS,IAHE,CAGG,KAAKC,YAHR,CAAP,CAIH,C,2BAED,sBAAc,CACV,MAAOF,CAAAA,KAAK,WAAI,KAAKV,IAAT,cAA0B,CAClCG,OAAO,CAAE,KAAKD,QADoB,CAA1B,CAAL,CAGFS,IAHE,CAGG,KAAKC,YAHR,CAAP,CAIH,C,2BAED,qBAAYC,IAAZ,CAAkB,CACd,MAAOH,CAAAA,KAAK,WAAI,KAAKV,IAAT,cAA0B,CAClCc,MAAM,CAAE,OAD0B,CAElCX,OAAO,CAAE,KAAKD,QAFoB,CAGlCa,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBC,IAAI,CAAEL,IAAI,CAACK,IADM,CAEjBC,KAAK,CAAEN,IAAI,CAACM,KAFK,CAAf,CAH4B,CAA1B,CAAL,CAQFR,IARE,CAQG,KAAKC,YARR,CAAP,CASH,C,6BAED,uBAAcC,IAAd,CAAoB,CAChB,MAAOH,CAAAA,KAAK,WAAI,KAAKV,IAAT,WAAuB,CAC/Bc,MAAM,CAAE,MADuB,CAE/BX,OAAO,CAAE,KAAKD,QAFiB,CAG/Ba,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBC,IAAI,CAAEL,IAAI,CAACK,IADM,CAEjBE,IAAI,CAAEP,IAAI,CAACO,IAFM,CAAf,CAHyB,CAAvB,CAAL,CAQFT,IARE,CAQG,KAAKC,YARR,CAAP,CASH,C,oCAEH,8BAAqBS,MAArB,CAA6BC,OAA7B,CAAsC,CAChC,MAAOZ,CAAAA,KAAK,WAAI,KAAKV,IAAT,mBAAuBqB,MAAvB,WAAuC,CAC/CP,MAAM,CAAEQ,OAAO,CAAG,KAAH,CAAW,QADqB,CAE/CnB,OAAO,CAAE,KAAKD,QAFiC,CAAvC,CAAL,CAIFS,IAJE,CAIG,KAAKC,YAJR,CAAP,CAKH,C,0BAED,oBAAWS,MAAX,CAAmB,CACf,MAAOX,CAAAA,KAAK,WAAI,KAAKV,IAAT,mBAAuBqB,MAAvB,EAAiC,CACzCP,MAAM,CAAE,QADiC,CAEzCX,OAAO,CAAE,KAAKD,QAF2B,CAAjC,CAAL,CAIFS,IAJE,CAIG,KAAKC,YAJR,CAAP,CAKH,C,4BAGD,sBAAaC,IAAb,CAAmB,CACf,MAAOH,CAAAA,KAAK,WAAI,KAAKV,IAAT,qBAAiC,CACzCc,MAAM,CAAE,OADiC,CAEzCX,OAAO,CAAE,KAAKD,QAF2B,CAGzCa,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACjBM,MAAM,CAAEV,IAAI,CAACU,MADI,CAAf,CAHmC,CAAjC,CAAL,CAOFZ,IAPE,CAOG,KAAKC,YAPR,CAAP,CAQH,C,mBAGL,GAAMY,CAAAA,GAAG,CAAG,GAAIzB,CAAAA,GAAJ,CAAQD,MAAR,CAAZ,CACA,cAAe0B,CAAAA,GAAf","sourcesContent":["import {config} from \"./utils\";\nclass Api {\n    constructor(config) {\n        this._url = config.url;\n        this._headers = config.headers;\n    }\n\n    _getResponse(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            headers: this._headers\n        })\n            .then(this._getResponse)\n    }\n\n    getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n            headers: this._headers\n        })\n            .then(this._getResponse)\n    }\n\n    setUserInfo(data) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        })\n            .then(this._getResponse)\n    }\n\n    setCardServer(data) {\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n            .then(this._getResponse)\n    }\n\n  changeLikeCardStatus(cardId, isLiked) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n            method: isLiked ? 'PUT' : 'DELETE',\n            headers: this._headers\n        })\n            .then(this._getResponse)\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers\n        })\n            .then(this._getResponse)\n    }\n\n\n    changeAvatar(data) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: data.avatar,\n            })\n        })\n            .then(this._getResponse)\n    }\n}\n\nconst api = new Api(config);\nexport default api;\n"]},"metadata":{},"sourceType":"module"}